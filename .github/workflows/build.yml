name: Build PPC

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
  workflow_dispatch:
    inputs:
      tagName:
        description: "Tag name"
        type: string
        default: ""
        required: false
      doRelease:
        description: "Publish new release"
        type: boolean
        default: false
        required: false

jobs:
  build:
    if: github.event.pull_request.draft == false
    name: Build PPC
    runs-on: windows-latest
    env:
      CC: cl.exe
      CXX: cl.exe
      vcpkg_baseline: 16e7a3eb109cde6115b1b5126449dfdf72341dfb
      VCPKG_DEFAULT_TRIPLET: x64-windows-static-md
      VCPKG_INSTALLATION_ROOT: ./vcpkg/

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Ninja
        run: choco install ninja

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.vcpkg_baseline }}
          vcpkgJsonGlob: "vcpkg.json"

      - name: Configure Project
        run: |
          cmake `
          --no-warn-unused-cli `
          -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE `
          -DCMAKE_TOOLCHAIN_FILE:STRING="vcpkg/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET:STRING=${{ env.VCPKG_DEFAULT_TRIPLET }} `
          -S./ `
          -B./build `
          -G "Ninja Multi-Config"

      - name: Build Project
        run: cmake --build ./build --config Release --target all --

      - name: Package Artifacts
        id: windows-pkg
        run: |
          $RELEASE_PACKAGE_FILE = "ppc.zip"
          mkdir F4SE\Plugins\
          cp build\ppc\Release\ppc.dll F4SE\Plugins\
          cp ppc_example.ini F4SE\Plugins\
          Compress-Archive F4SE $RELEASE_PACKAGE_FILE
          $release_filepath = Get-ChildItem $RELEASE_PACKAGE_FILE | %{$_[0].FullName}
          echo "artifact_slug=$release_filepath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ppc
          path: ${{ steps.windows-pkg.outputs.artifact_slug }}
          if-no-files-found: error
          retention-days: 1

  publish_release:
    name: Publish release
    if: ${{ !cancelled() && github.event.inputs.doRelease == 'true' && github.event.inputs.tagName != '' && needs.build.result == 'success' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create release
        id: create_release
        run: |
          set -xe
          shopt -s nullglob
          RELDATE="$(date +'%Y-%m-%d %H:%M')"
          NAME="${{ github.event.inputs.tagName }}"
          TAGNAME="${{ github.event.inputs.tagName }}"
          gh release create "$TAGNAME" --target "main" --title "$NAME" artifacts/**/*.{zip,tar.xz,.apk}
          echo "tag_name=${TAGNAME}" >> $GITHUB_OUTPUT
          echo "rel_date=${RELDATE}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ github.token }}
